package comp3911.cwk2;

import java.io.File;
import java.io.FileWriter;
import java.io.IOException;
import java.io.PrintWriter;
import java.security.MessageDigest;
import java.security.NoSuchAlgorithmException;
import java.sql.Connection;
import java.sql.DriverManager;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.time.LocalDateTime;
import java.time.format.DateTimeFormatter;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import java.util.regex.Pattern;

import javax.servlet.ServletException;
import javax.servlet.http.HttpServlet;
import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;

import freemarker.template.Configuration;
import freemarker.template.Template;
import freemarker.template.TemplateException;
import freemarker.template.TemplateExceptionHandler;

@SuppressWarnings("serial")
public class AppServlet extends HttpServlet {

  private static final String CONNECTION_URL = "jdbc:sqlite:db.sqlite3";
  private static final String LOG_FILE_PATH = "inputs.log";

  private final Configuration fm = new Configuration(Configuration.VERSION_2_3_28);
  private Connection database;

  @Override
  public void init() throws ServletException {
    configureTemplateEngine();
    connectToDatabase();
  }

  private void configureTemplateEngine() throws ServletException {
    try {
      fm.setDirectoryForTemplateLoading(new File("./templates"));
      fm.setDefaultEncoding("UTF-8");
      fm.setTemplateExceptionHandler(TemplateExceptionHandler.HTML_DEBUG_HANDLER);
      fm.setLogTemplateExceptions(false);
      fm.setWrapUncheckedExceptions(true);
    } catch (IOException error) {
      throw new ServletException(error.getMessage());
    }
  }

  private void connectToDatabase() throws ServletException {
    try {
      database = DriverManager.getConnection(CONNECTION_URL);
    } catch (SQLException error) {
      throw new ServletException(error.getMessage());
    }
  }

  private void logInput(String username, String surname, boolean authSuccess) {
    try (PrintWriter logWriter = new PrintWriter(new FileWriter(LOG_FILE_PATH, true))) {
      LocalDateTime now = LocalDateTime.now();
      DateTimeFormatter formatter = DateTimeFormatter.ofPattern("yyyy-MM-dd HH:mm:ss");
      String timestamp = now.format(formatter);

      String authStatus = authSuccess ? "Authentication Success" : "Authentication Failed";
      logWriter.println(String.format("%s - Username: %s, Surname: %s, %s",
                                      timestamp,
                                      username != null ? sanitize(username) : "N/A",
                                      surname != null ? sanitize(surname) : "N/A",
                                      authStatus));
    } catch (IOException e) {
      System.err.println("Failed to log input: " + e.getMessage());
    }
  }

  private String sanitize(String input) {
    return input.replaceAll("[^a-zA-Z0-9]", ""); // Basic sanitization
  }

  private boolean validateInputs(String username, String password, String surname) {
    if (username == null || password == null || surname == null) {
      return false;
    }

    Pattern usernamePattern = Pattern.compile("^[a-zA-Z0-9]{1,20}$");
    Pattern passwordPattern = Pattern.compile("^.{6,}$");
    Pattern surnamePattern = Pattern.compile("^[a-zA-Z]{1,50}$");

    return usernamePattern.matcher(username).matches() &&
           passwordPattern.matcher(password).matches() &&
           surnamePattern.matcher(surname).matches();
  }

  @Override
  protected void doGet(HttpServletRequest request, HttpServletResponse response)
   throws ServletException, IOException {
    try {
      Template template = fm.getTemplate("login.html");
      template.process(null, response.getWriter());
      response.setContentType("text/html");
      response.setStatus(HttpServletResponse.SC_OK);
    } catch (TemplateException error) {
      response.sendError(HttpServletResponse.SC_INTERNAL_SERVER_ERROR);
    }
  }

  @Override
  protected void doPost(HttpServletRequest request, HttpServletResponse response)
      throws ServletException, IOException {
    String username = sanitize(request.getParameter("username"));
    String password = request.getParameter("password"); // Passwords should not be sanitized before hashing
    String surname = sanitize(request.getParameter("surname"));

    if (!validateInputs(username, password, surname)) {
      response.sendError(HttpServletResponse.SC_BAD_REQUEST, "Invalid input");
      return;
    }

    boolean authSuccess = false;
    try {
      authSuccess = authenticated(username, password);
    } catch (SQLException e) {
      System.err.println("SQL Error: " + e.getMessage());
      response.sendError(HttpServletResponse.SC_INTERNAL_SERVER_ERROR, "Database error during authentication");
      return;
    }

    logInput(username, surname, authSuccess);

    try {
      if (authSuccess) {
        Map<String, Object> model = new HashMap<>();
        model.put("records", searchResults(surname));
        Template template = fm.getTemplate("details.html");
        template.process(model, response.getWriter());
      } else {
        Template template = fm.getTemplate("invalid.html");
        template.process(null, response.getWriter());
      }
      response.setContentType("text/html");
      response.setStatus(HttpServletResponse.SC_OK);
    } catch (Exception error) {
      response.sendError(HttpServletResponse.SC_INTERNAL_SERVER_ERROR);
    }
  }

  private boolean authenticated(String username, String password) throws SQLException {
    String query = "SELECT password FROM user WHERE username = ?";
    try (PreparedStatement pstmt = database.prepareStatement(query)) {
        pstmt.setString(1, username);

        try (ResultSet results = pstmt.executeQuery()) {
            if (results.next()) {
                String storedHashedPassword = results.getString("password");

                String providedHashedPassword = hashPassword(password);
                return storedHashedPassword.equals(providedHashedPassword);
            }
        }
    }
    return false;
  }

  private String hashPassword(String password) {
    try {
      MessageDigest digest = MessageDigest.getInstance("SHA-256");
      byte[] hashedBytes = digest.digest(password.getBytes());
      StringBuilder sb = new StringBuilder();
      for (byte b : hashedBytes) {
        sb.append(String.format("%02x", b));
      }
      return sb.toString();
    } catch (NoSuchAlgorithmException e) {
      throw new RuntimeException("SHA-256 algorithm not found", e);
    }
  }

  private List<Record> searchResults(String surname) throws SQLException {
    List<Record> records = new ArrayList<>();
    String query = "SELECT * FROM patient WHERE surname = ? COLLATE NOCASE";
    try (PreparedStatement pstmt = database.prepareStatement(query)) {
      pstmt.setString(1, surname);
      try (ResultSet results = pstmt.executeQuery()) {
        while (results.next()) {
          Record rec = new Record();
          rec.setSurname(results.getString(2));
          rec.setForename(results.getString(3));
          rec.setAddress(results.getString(4));
          rec.setDateOfBirth(results.getString(5));
          rec.setDoctorId(results.getString(6));
          rec.setDiagnosis(results.getString(7));
          records.add(rec);
        }
      }
    }
    return records;
  }
}
